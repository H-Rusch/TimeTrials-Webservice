openapi: 3.0.0
info:
  title: Time Trial API
  description: 'API for saving times driven in Mario Kart 8 Deluxe Time Trials'
  version: v0.1
  contact:
    name: H-Rusch
    url: 'https://github.com/H-Rusch/TimeTrials-Webservice/issues'
tags:
  - name: times-api
    description: API to store times in the database

paths:
  /times:
    post:
      tags:
        - times-api
      operationId: SaveNewTime
      summary: Create a time for a user
      requestBody:
        description: The time to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeRequest'
            example:
              username: 'username'
              track: 'BABY_PARK_GCN'
              time: '1:05.480'
      responses:
        '201':
          description: Confirmation that the time was saved
        '400':
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: BAD_REQUEST
                message: 'Validation failed'
                timestamp: '2023-11-14 12:28:42'
                subErrors:
                  - type: validationError
                    field: username
                    rejectedValue:
                    message: 'The given username is too short.'

  /times/best:
    get:
      tags:
        - times-api
      operationId: GetBestTimeForEachTrack
      summary: Get a list of the best time for each track
      parameters:
        - in: query
          name: username
          required: false
          schema:
            type: string
          description: An optional parameter that can be used to restrict the search to only return times for a specific user.

      responses:
        '200':
          description: A list of the best time for each track. If given a valid username, the list will only contain times for that user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordForEachTrackResponse'
              example:
                BabyPark:
                  - username: 'Username'
                    track: 'GCN Baby Park'
                    duration: '1:05.480'
                    createdAt: '2023-11-20 15:28:15'
                  - username: 'Username2'
                    track: 'GCN Baby Park'
                    duration: '1:05.480'
                    createdAt: '2023-11-20 03:54:11'
                WaterPark:
                  - username: 'Other Username'
                    track: 'Water Park'
                    duration: '1:24.534'
                    createdAt: '2023-11-20 12:03:26'
        '204':
          description: NO_CONTENT an empty response signalling no times were found.

  /times/best/{track}:
    get:
      tags:
        - times-api
      operationId: GetBestTimeForTrack
      summary: Get the best best time for a specific track
      parameters:
        - in: path
          name: track
          required: true
          schema:
            type: string
          description: Required parameter which specifies which track to get the best time for.
        - in: query
          name: username
          required: false
          schema:
            type: string
          description: An optional parameter that can be used to restrict the search to only return times for a specific user.

      responses:
        '200':
          description: The best time for a track. If given a valid username, this will be the best time on the track for that user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeResponse'
              example:
                username: 'Username'
                track: 'GCN Baby Park'
                duration: '1:05.480'
                createdAt: '2023-11-20 15:28:15'
        '204':
          description: NO_CONTENT an empty response signalling no best time was found on that track (or for that user if specified).
        '400':
          description: BAD_REQUEST the track could not be built from the given string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: BAD_REQUEST
                message: "Track can not be built from value 'INVALID_TRACK'."
                timestamp: '2023-11-14 12:28:42'

components:
  schemas:
    ErrorResponse:
      type: object
      description: Response sent to the user when there was an error performing an API request
      properties:
        status:
          type: integer
          description: HTTP status code showing what went wrong
        message:
          type: string
        timestamp:
          type: string
          description: timestamp in the format 'yyyy-MM-dd HH:mm:ss'
          format: date-time
        subErrors:
          type: array
          description: Collection of sub-errors showing what went wrong in more detail
          items:
            $ref: '#/components/schemas/SubError'

    SubError:
      description: Base-class for possible sub-errors, detailing what went wrong exactly (Currently there is only one)
      discriminator:
        propertyName: type
      additionalProperties: true
      oneOf:
        - $ref: '#/components/schemas/ValidationError'

    ValidationError:
      type: object
      description: Sub-error which provides details that a field did not pass validation
      properties:
        type:
          type: string
        field:
          type: string
          description: For which field was a value rejected
        rejectedValue:
          type: object
          description: The value for which the validation failed
        message:
          type: string

    TimeRequest:
      type: object
      description: Request entity to be sent when submitting a new time
      required:
        - username
        - track
        - duration
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 32
        track:
          type: string
          description: The track the time was created for. This has to match either the ENUM constant or the enum constant's pretty name.
        duration:
          type: string
          pattern: ^(\d+):(\d{2})\.(\d{3})$
          description: The driven time. It has to be given in the format M:SS.msmsms
        combination:
          type: object
          $ref: '#/components/schemas/Combination'

    RecordForEachTrackResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TimeResponse'

    TimeResponse:
      description: Response entity returned to the user. Includes multiple times in case multiple times are tied
      type: array
      items:
        $ref: '#/components/schemas/TimeResponseEntry'

    TimeResponseEntry:
      type: object
      description: Time entry a user has driven on a track with additional information
      properties:
        username:
          type: string
          description: Name of the user who drove that time
        track:
          type: string
          description: Pretty name for the track
        duration:
          type: string
          description: The driven time. Will be given in the format M:SS.msmsms
        combination:
          type: object
          description: Vehicle combination the time was set in
          $ref: '#/components/schemas/Combination'
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the time was created in the format 'yyyy-MM-dd HH:mm:ss'


    Combination:
      type: object
      description: The combination of driver and vehicle parts which was used for the driven time.
      properties:
        driver:
          type: string
        vehicle:
          type: string
        tires:
          type: string
        glider:
          type: string
